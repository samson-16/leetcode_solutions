# Last updated: 5/5/2025, 5:10:36 AM
class Solution:
    def isBipartite(self, graph: List[List[int]]) -> bool:

        n = len(graph)

        def dfs(node):
            flag = True
            for neighbour in graph[node]:
                if color[neighbour]==-1:
                    if color[node]==0:
                        color[neighbour] = 1
                    else:
                        color[neighbour] = 0
                    flag = flag and dfs(neighbour)
                elif color[node] == color[neighbour]:
                    return False
            return flag
        color = [-1 for _ in range(n)]
        result = True
        for node in range(n):
            if color[node] == -1:
                color[node] = 0
                result = result and dfs(node)
        return result
